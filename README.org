简介
 
本软件是基于IEEE 1588标准的精确时间协议（PTP）在Linux上的实现。其双重设计目标是：提供健壮的标准实现，并使用Linux内核提供的最相关、最现代的应用程序编程接口（API）。不支持旧版API和其他平台。
 
许可证
 
该软件由作者版权所有，根据GNU通用公共许可证授权。有关许可条款的详细信息，请参阅文件 COPYING 。
 
功能特性
 
- 时间戳支持：通过Linux的 SO_TIMESTAMPING 套接字选项支持硬件和软件时间戳。
 
- PHC子系统支持：使用 clock_gettime 系列调用（包括 clock_adjtimex 系统调用）支持Linux PTP硬件时钟（PHC）子系统。
 
- 时钟类型：实现边界时钟（BC）、普通时钟（OC）和透明时钟（TC）。
 
- 传输协议：支持UDP/IPv4、UDP/IPv6和原始以太网（第2层）传输。
 
- 802.1AS支持：作为终端设备支持IEEE 802.1AS-2011标准。
 
- 模块化设计：便于添加新的传输层和时钟伺服模块。
 
- 单播模式：支持单播操作。
 
- 配置文件：支持多种配置文件，包括：
 
- 汽车配置文件
 
- 默认1588配置文件
 
- 企业配置文件
 
- 电信配置文件G.8265.1、G.8275.1和G.8275.2
 
- 监控协议：支持NetSync监控协议。
 
- 点对点一步模式：实现点对点一步时钟同步。
 
- 接口支持：支持绑定接口、IPoIB和VLAN接口。
 
- 认证TLV：使用Nettle、GnuTLS或OpenSSL支持认证TLV（注：OpenSSL v3+基于Apache 2许可证，编译时需添加 make EXTRA_CFLAGS=-DUSE_OPENSSL ）。

* Getting the Code

  You can download the latest released version at Source Forge.

  http://sourceforge.net/projects/linuxptp/files/latest/download

  The source code is managed using the git version control system. To
  get your own copy of the project sources, use the following command.

#+BEGIN_EXAMPLE
  git clone git://git.code.sf.net/p/linuxptp/code linuxptp
#+END_EXAMPLE

  If the git protocol is blocked by your local area network, then you
  can use the alternative HTTP protocol instead.

#+BEGIN_EXAMPLE
  git clone http://git.code.sf.net/p/linuxptp/code linuxptp
#+END_EXAMPLE

* System Requirements

  In order to run this software, you need Linux kernel version 3.0 or
  newer.  Check whether your network interface supports PTP with the
  following command.

#+BEGIN_EXAMPLE
  ethtool -T eth0
#+END_EXAMPLE

  This command shows whether a MAC supports hardware or software time
  stamping.  The following example output indicates support for
  hardware time stamping.

#+BEGIN_EXAMPLE
Time stamping parameters for eth6:
Capabilities:
        hardware-transmit     (SOF_TIMESTAMPING_TX_HARDWARE)
        software-transmit     (SOF_TIMESTAMPING_TX_SOFTWARE)
        hardware-receive      (SOF_TIMESTAMPING_RX_HARDWARE)
        software-receive      (SOF_TIMESTAMPING_RX_SOFTWARE)
        software-system-clock (SOF_TIMESTAMPING_SOFTWARE)
        hardware-raw-clock    (SOF_TIMESTAMPING_RAW_HARDWARE)
PTP Hardware Clock: 1
Hardware Transmit Timestamp Modes:
        off                   (HWTSTAMP_TX_OFF)
        on                    (HWTSTAMP_TX_ON)
Hardware Receive Filter Modes:
        none                  (HWTSTAMP_FILTER_NONE)
        all                   (HWTSTAMP_FILTER_ALL)
#+END_EXAMPLE

  The next example shows the case where the MAC only supports software
  time stamping.  The ~ptp4l~ program requires either the ~-S~ command
  line argument or the ~time_stamping software~ configuration option
  when using such interfaces.

#+BEGIN_EXAMPLE
Time stamping parameters for enp6s0:
Capabilities:
        software-transmit     (SOF_TIMESTAMPING_TX_SOFTWARE)
        software-receive      (SOF_TIMESTAMPING_RX_SOFTWARE)
        software-system-clock (SOF_TIMESTAMPING_SOFTWARE)
PTP Hardware Clock: none
Hardware Transmit Timestamp Modes: none
Hardware Receive Filter Modes: none
#+END_EXAMPLE

  Note the ~software-transmit (SOF_TIMESTAMPING_TX_SOFTWARE)~
  capability.  If this is lacking, then the MAC cannot be used at
  all.  However, adding this capability entails adding a single line
  of code to the device driver.

* Installation

   1. Just type 'make'

   2. If you compiled your own kernel (and the headers are not
      installed into the system path), then you should set the
      KBUILD_OUTPUT environment variable as in the example, above.

   3. In order to install the programs and man pages into /usr/local,
      run the 'make install' target. You can change the installation
      directories by setttings the variables prefix, sbindir, mandir,
      and man8dir on the make command line.

* Getting Involved

  The software development is hosted at Source Forge.

  https://sourceforge.net/projects/linuxptp/

** Reporting Bugs

   Please report any bugs or other issues with the software to the
   linuxptp-users mailing list.

   https://lists.nwtime.org/sympa/info/linuxptp-users

** Development

   If you would like to get involved in improving the software, please
   join the linuxptp-devel mailing list.

   https://lists.nwtime.org/sympa/info/linuxptp-devel

*** Submitting Patches

   1. Before submitting patches, please make sure that you are starting
      your work on the *current HEAD* of the git repository.

   2. Please checkout the ~CODING_STYLE.org~ file for guidelines on how to
      properly format your code.

   3. Describe your changes. Each patch will be reviewed, and the reviewers
      need to understand why you did what you did.

   4. *Sign-Off* each commit, so the changes can be properly attributed to
      you and you explicitely give your agreement for distribution under
      linuxptp's license. Signing-off is as simple as:

      #+BEGIN_EXAMPLE
      git commit -s
      #+END_EXAMPLE

      or by adding the following line (replace your real name and email)
      to your patch:

      #+BEGIN_EXAMPLE
      Signed-off-by: Random J Developer <random@developer.example.org>
      #+END_EXAMPLE

   5. Finally, send your patches via email to the linuxptp-devel mailing
      list, where they will be reviewed, and eventually be included in the
      official code base.

      #+BEGIN_EXAMPLE
      git send-email --to linuxptp-devel@lists.nwtime.org origin/master
      #+END_EXAMPLE

* Thanks

  Thanks to AudioScience Inc for sponsoring the 8021.AS support.

  - http://www.audioscience.com

  Thanks to Exablaze for donating an ExaNIC X10

  - http://exablaze.com/exanic-x10

  Thanks to Intel Corporation for donating four NICs, the 82574,
  82580, 82599, and the i210.

  - http://www.intel.com
  - http://e1000.sourceforge.net

  Thanks to Meinberg Funkuhren for donating a LANTIME M1000.

  - https://www.meinbergglobal.com

  Thanks to Moser Baer for sponsoring the Telecom Profiles and unicast
  support.

  - http://www.mobatime.com

  For testing I use an OTMC 100 grandmaster clock donated by OMICRON Lab.

  - http://www.omicron-lab.com/ptp
